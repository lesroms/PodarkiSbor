import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

#  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("podarki-457609-10752258b8f6.json", scope)
client = gspread.authorize(creds)

#  –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
SPREADSHEET_NAME = "–£—á–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤"
sheet = client.open(SPREADSHEET_NAME).sheet1

FRIENDS = ["–ú–∞–∫—Å–∏–º", "–¢—ë–º–∞", "–§–µ–¥—è", "–ò–ª—å—è", "–î–∏–º–∞ –§.", "–î–∏–º–∞ –ö.", "–ê—Ä—Ç—É—Ä", "–ï–≥–æ—Ä"]
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(name, callback_data=f"to:{name}")] for name in FRIENDS]
    await update.message.reply_text("–ö–æ–º—É –¥–∞—Ä–∏–º –ø–æ–¥–∞—Ä–æ–∫?", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("to:"):
        user_data[query.from_user.id] = {"to": query.data[3:]}
        keyboard = [[InlineKeyboardButton(name, callback_data=f"from:{name}")] for name in FRIENDS]
        await query.edit_message_text(
            f"–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è: {query.data[3:]}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –æ—Ç –∫–æ–≥–æ –≤–∑–Ω–æ—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("from:"):
        user_data[query.from_user.id]["from"] = query.data[5:]
        await query.edit_message_text(
            f"–ö–æ–º—É: {user_data[query.from_user.id]['to']}\n–û—Ç –∫–æ–≥–æ: {query.data[5:]}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data and "from" in user_data[user_id]:
        try:
            amount = float(update.message.text)
            record = [
                user_data[user_id]["to"],
                user_data[user_id]["from"],
                amount,
                "",  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
                update.message.date.strftime("%Y-%m-%d")
            ]
            sheet.append_row(
                record,
                value_input_option="USER_ENTERED",
                insert_data_option="INSERT_ROWS",
                table_range="A1"
            )
            await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª! üéÅ")
            user_data.pop(user_id)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏.")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token("7924409871:AAGq_A5hk8DMwv0kZstmGxFGkoj4eF8dQ3w").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("petuh", start))  # –∫–æ–º–∞–Ω–¥–∞ /petuh
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
